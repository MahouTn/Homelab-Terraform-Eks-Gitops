// Filename: Jenkinsfile
// Description: CI/CD pipeline that uses a Kubernetes agent with the
//              Kaniko Service Account (kaniko-sa) to securely build and
//              push a Docker image to ECR using IRSA.
//
// NOTE: This version forces authentication using AWS CLI explicitly inside the Kaniko container.

pipeline {
    environment {
        // NOTE: I'm leaving the image URI hardcoded as per your provided pipeline.
        IMAGE_FULL_URI = '802617578034.dkr.ecr.eu-west-1.amazonaws.com/homelab-eks:latest'
        REGISTRY_DOMAIN = '802617578034.dkr.ecr.eu-west-1.amazonaws.com'
        AWS_REGION = 'eu-west-1' // Define region for AWS CLI
    }

    agent {
        kubernetes {
            yaml '''
kind: Pod
metadata:
  name: kaniko-builder
  namespace: ci-cd
spec:
  # CRITICAL: This links the Pod to your AWS IAM Role (IRSA) for ECR access
  serviceAccountName: kaniko-sa 
  containers:
  - name: kaniko
    image: gcr.io/kaniko-project/executor:v1.23.2-debug
    imagePullPolicy: IfNotPresent
    
    # FIX: Use the 'tail -f /dev/null' command via the shell. 
    command:
     - /busybox/sh
     - -c
     - "tail -f /dev/null"
    tty: true
'''
            // Set the container with the image builder utility as the default
            defaultContainer 'kaniko'
        }
    }

    stages {
        stage('Build and Push Image') {
            steps {
                container('kaniko'){
                    // 1. Install AWS CLI using apk (since we use the debug image)
                    sh 'apk add --no-cache aws-cli'

                    // 2. Use AWS CLI to get the ECR login password and write the credentials 
                    //    directly to the location where Kaniko expects a config.json file.
                    sh """
                    aws ecr get-login-password --region \${AWS_REGION} | \
                    /kaniko/docker-creds-helper \
                    --ecr-uri \${REGISTRY_DOMAIN} \
                    > /kaniko/.docker/config.json
                    """
                    
                    // 3. Run Kaniko using the explicit config file
                    sh """
                    /kaniko/executor \\
                        --context=\${WORKSPACE}/app-code/nodejs-demoapp/build \\
                        --dockerfile=./Dockerfile \\
                        --destination=\${IMAGE_FULL_URI} \\
                        --dockerfile-config=/kaniko/.docker/config.json \\
                        --skip-tls-verify-registry=\${REGISTRY_DOMAIN} \\
                        --registry-mirror=\${REGISTRY_DOMAIN}
                    """
                }
            }
        }
    }
}
