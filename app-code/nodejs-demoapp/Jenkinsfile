// Filename: Jenkinsfile
// Description: CI/CD pipeline that uses a Kubernetes agent with the
//              Kaniko Service Account (kaniko-sa) to securely build and
//              push a Docker image to ECR using IRSA.

pipeline {
    // Defines where the pipeline runs (on the EKS cluster)
    agent {
        kubernetes {
            // --- CRITICAL FIX: Specify the correct Namespace ---
            // The service account was deployed to the 'ci-cd' namespace, 
            // so we must tell Jenkins to launch the agent pod there.
            namespace 'ci-cd'

            // This is the Service Account we created via kubectl, which is 
            // annotated with the ECR Push IAM Role ARN.
            serviceAccount 'kaniko-sa' 
            
            // Define the Kaniko container as the main container for the agent Pod
            defaultContainer 'kaniko'
            
            // Define the container templates for the Kubernetes Pod
            // The template block syntax is adjusted to satisfy Groovy's list requirement.
            containerTemplates([
                containerTemplate(
                    name: 'kaniko',
                    // Using your preferred Kaniko image
                    image: 'gcr.io/kaniko-project/executor:latest', 
                    tty: true,
                    alwaysPullImage: true
                    // Removed custom 'command' and 'args'. The pod will now use the 
                    // Kaniko image's default entrypoint, which is correct for building.
                )
            ])
            // Use the label from your old Jenkinsfile for agent matching
            label 'kaniko-agent'
        }
    }

    environment {
        // --- ECR & Image Variables ---
        // INFERRED from your old Jenkinsfile:
        AWS_REGION = 'eu-west-1' 
        ECR_REPO = 'homelab-eks' 
        
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        // We will dynamically fetch the account ID, but the region and repo are fixed.
        IMAGE_FULL_URI = "${env.AWS_ACCOUNT_ID}.dkr.ecr.${env.AWS_REGION}.amazonaws.com/${env.ECR_REPO}:${env.IMAGE_TAG}"
    }

    stages {
        stage('Setup Environment') {
            steps {
                script {
                    // Fetch the current AWS Account ID using the IRSA role
                    // This command should succeed if the IRSA role is properly assumed.
                    echo "Fetching AWS Account ID using IRSA..."
                    
                    // NOTE: This stage requires the 'aws' cli to be installed in the JNLP/base agent container.
                    env.AWS_ACCOUNT_ID = sh(script: 'aws sts get-caller-identity --query Account --output text', returnStdout: true).trim()
                    
                    echo "AWS Account ID: ${env.AWS_ACCOUNT_ID}"
                    echo "Image URI: ${env.IMAGE_FULL_URI}"
                }
            }
        }

        stage('Build and Push Image') {
            steps {
                // This step explicitly runs inside the Kaniko container defined above
                container('kaniko') {
                    // Kaniko automatically uses the IRSA-provided credentials 
                    // (set via the serviceAccount 'kaniko-sa') for ECR authentication.
                    sh """
                    # Kaniko command to build and push (Shell comment is allowed here)
                    /kaniko/executor \\
                        --context=\${WORKSPACE}/deploy \\
                        --dockerfile=\${WORKSPACE}/deploy/Dockerfile \\
                        --destination=\${IMAGE_FULL_URI} \\
                        --skip-tls-verify \\
                        --insecure-pull
                    """
                    echo "Successfully built and pushed image to ECR: ${env.IMAGE_FULL_URI}"
                }
            }
        }
    }
}
