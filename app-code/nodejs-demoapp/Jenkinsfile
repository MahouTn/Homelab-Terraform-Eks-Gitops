// Filename: Jenkinsfile
// Description: CI/CD pipeline that uses a Kubernetes agent with the
//              Kaniko Service Account (kaniko-sa) to securely build and
//              push a Docker image to ECR using IRSA.
//
// NOTE: This version uses an Init Container and a shared volume for the most reliable credential injection.

pipeline {
    environment {
        // NOTE: I'm leaving the image URI hardcoded as per your provided pipeline.
        IMAGE_FULL_URI = '802617578034.dkr.ecr.eu-west-1.amazonaws.com/homelab-eks:latest'
        REGISTRY_DOMAIN = '802617578034.dkr.ecr.eu-west-1.amazonaws.com'
        AWS_REGION = 'eu-west-1' // Define region for AWS CLI
    }

    agent {
        kubernetes {
            yaml '''
kind: Pod
metadata:
  name: kaniko-builder
  namespace: ci-cd
spec:
  # CRITICAL: This links the Pod to your AWS IAM Role (IRSA) for ECR access
  serviceAccountName: kaniko-sa 
  
  # 1. Define a volume to share the config.json file
  volumes:
  - name: docker-config-vol
    emptyDir: {}
    
  # 2. Init Container: Runs once to generate ECR credentials before the main container starts
  initContainers:
  - name: aws-cli-setup
    image: amazon/aws-cli:latest
    imagePullPolicy: IfNotPresent
    env:
    - name: AWS_REGION
      value: "eu-west-1" # Hardcoding for Init Container clarity
    
    # Mount the shared volume so the file is accessible to Kaniko
    volumeMounts:
    - name: docker-config-vol
      mountPath: /root/.docker
      
    # Command to fetch the ECR password and write the credentials file
    command: ["/bin/sh"]
    args:
    - "-c"
    - |
      echo "Fetching ECR credentials using IRSA..."
      
      # Fetch the temporary ECR password using the IRSA role
      PASSWORD=$(aws ecr get-login-password --region $AWS_REGION)
      ECR_URI=802617578034.dkr.ecr.eu-west-1.amazonaws.com

      # Create the standard Docker config.json structure with the ECR auth token (base64 encoded)
      mkdir -p /root/.docker
      cat <<EOF > /root/.docker/config.json
{
    "auths": {
        "\${ECR_URI}": {
            "auth": "\$(echo -n "AWS:\${PASSWORD}" | base64)"
        }
    }
}
EOF
      echo "Credentials successfully written to shared volume."
  
  # 3. Kaniko Container: The actual builder
  containers:
  - name: kaniko
    image: gcr.io/kaniko-project/executor:debug
    imagePullPolicy: IfNotPresent
    
    # Mount the shared volume to access the pre-generated credentials
    volumeMounts:
    - name: docker-config-vol
      mountPath: /kaniko/.docker # Kaniko looks in this path for config.json
      
    # FIX: Use the 'tail -f /dev/null' command via the shell. 
    command:
     - /busybox/sh
     - -c
     - "tail -f /dev/null"
    tty: true
'''
            // Set the container with the image builder utility as the default
            defaultContainer 'kaniko'
        }
    }

    stages {
        stage('Build and Push Image') {
            steps {
                container('kaniko'){
                    // NOTE: The 'aws-cli' installation steps are now in the Init Container and removed here.
                    
                    // 3. Run Kaniko using the explicit config file
                    sh """
                    /kaniko/executor \\
                        --context=\${WORKSPACE}/app-code/nodejs-demoapp/build \\
                        --dockerfile=./Dockerfile \\
                        --destination=\${IMAGE_FULL_URI} \\
                        --dockerfile-config=/kaniko/.docker/config.json \\
                        --skip-tls-verify-registry=\${REGISTRY_DOMAIN}
                    """
                }
            }
        }
    }
}
